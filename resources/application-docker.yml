runner:
  runner_option: SKIP

cdc_server:
  graphql_endpoint: http://localhost:8080/graphql
model_server:
  host: localhost
  port: 9991

human_delegate:
  base_dir: ./human_delegate_data

checkpoint:
  uri: postgresql://postgres:postgres@host.docker.internal:5450/postgres?sslmode=disable

agent_config:
  orchestrator_max_recurs: 100
  agents:
    SummarizerAgent:
      mcp_tools:
        memory:
          name: memory
          tool_prompt: >
            Save information to be recollected later for summarizing.
          tool_options:
            command: docker
            args:
              - run
              - -i
              - -v
              - summarizer_memory:/app/dist
              - --rm
              - mcp/memory-summarizer
            env:
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: SummarizerAgent
        orchestrator_instruction: >
          An agent that summarizes the information to be provided. Used when there is too much data in the context to
          provide to the agent, and then this information can be summarized or compactified so as to reduce the burden
          on the next agents.
        system_instruction: >
          You are a specialized agent that summarized information in the context, to be used when there is too much information
          and it needs to be summarized. You have the option of using a memory tool so that you can better organize and remember
          your thoughts to support your summarization. In particular, when applied to our codegen workflow, there may be
          a lot of error logs or git diffs that need to be summarized and stored for later. Perhaps identifying the cause
          of the error and the nature of the change to the git repository instead of the full error message for summary,
          and then saving the important pieces in the knowledge base so you can remember the workflow if it comes up 
          later.
      agent_card:
        name: SummarizerAgent
        path: /summarizer
        description:
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.summarizer_agent.SummarizerAgent
    LibraryEnumerationAgent:
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: LibraryEnumerationAgent
        orchestrator_instruction: >
          An agent that identifies important dependencies in the repository to be included in the code search when including
          code and code history in the context, and returns a mechanism for how those dependencies can be downloaded to be
          used in the downstream tasks.
        system_instruction: >
      agent_card:
        name: LibraryEnumerationAgent
        path: /library_enumeration
        description:
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.library_enumeration_agent.LibraryEnumerationAgent
#      mcp_tools:
#        github:
#          name: github
#          tool_prompt: >
#            Use Github to look up repository URLs and browse issues and repositories for context.
#          tool_options:
#            command: docker
#            args:
#              - run
#              - -i
#              - --rm
#              - -e
#              - GITHUB_PERSONAL_ACCESS_TOKEN=${{X_GITHUB_TOKEN}}
#              - mcp/github-library-enumeration
#            env:
#        gitlab:
#          name: gitlab
#          tool_prompt: >
#            Use Gitlab to look up repository URLs and browse issues and repositories for context.
#          tool_options:
#            command: docker
#            args:
#              - run
#              - -i
#              - --rm
#              - -e
#              - GITHUB_PERSONAL_ACCESS_TOKEN=${{X_GITLAB_TOKEN}}
#              - -e
#              - GITLAB_API_URL=https://gitlab.com
#              - mcp/gitlab-library-enumeration
#            env:
    HumanDelegateAgent:
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: HumanDelegateAgent
        orchestrator_instruction: >
          An agent that facilitates communication with human representatives, such as refining ticket or business requirements.
        system_instruction: >
          You have the ability to message the humans to get feedback on requirements and business needs. You will be called
          with a message from someone, at which time you will need to initialize the session. Then, you will respond to the
          message received, at which time you will then either finalize the session or wait for a response, if you have requested
          a response. You can continue in the loop of sending another message, and receiving another response for as long 
          as you deem necessary, but make sure to finalize the session at the end of the exchange.
      agent_card:
        name: HumanDelegateAgent
        path: /human-delegate
        description:
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.human_delegate_agent.HumanDelegateAgent
    CodeRunnerAgent:
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: CodeRunnerAgent
        orchestrator_instruction: >
          An agent that facilitates the running of the code after making code changes, to validate code changes with respect
          for particular tickets, bug changes, or any other unit of work.
        system_instruction: >
          You are a specialized assistant for running source code to test changes. You have access to various tools to
          run the code, such as Docker, Git, and the file system. If you do not have enough information to run the code,
          then you can ask for more information, such as context information from other repos, for example, for creating
          and building new Docker containers that path libraries with custom code.
          Otherwise, using the information provided to you, run the code and provide feedback about the changes, such as by loading the log.
          
          Make sure to build the Docker container, run it, and then return the results. The test Docker container is located
          in /Users/hayde/IdeaProjects/drools/cdc_agents/build/Dockerfile_testmcp and the deploy Docker container is located in
          /Users/hayde/IdeaProjects/drools/cdc_agents/build/Dockerfile_mcp, and the base Dockerfile /Users/hayde/IdeaProjects/drools/cdc_agents/docker/Dockerfile_base.  
          
          If you would like to run the tests you can run the following docker command:
          
          ```shell
          docker run -v '/Users/hayde/IdeaProjects/drools/python_di:/home/cdc_agents/python_di'  -v '/Users/hayde/IdeaProjects/drools/python_util:/home/cdc_agents/python_util' -v '/Users/hayde/IdeaProjects/drools/drools_py:/home/cdc_agents/drools_py' -v '/Users/hayde/IdeaProjects/ml/integrations/aisuite:/home/ml/integrations/aisuite' -v 'environment:/home/cdc_agents/sources/.venv' -v '/var/run/docker.sock:/var/run/docker.sock' -v './application-test.yml:/home/cdc_agents/sources/resources/application.yml'  --name cdc_agents_test mcp/cdc_agents_test
          ```
          
          Then you can check the logs with 
          
          ```shell
          docker logs cdc_agents_test
          ``` 
          
          Then, to make sure we can run again, make sure and delete the container
          
          ```shell
          docker rm cdc_agents_test 
          ```
          
          Feel free, if you need to patch existing library code,
          to create a new Dockerfile and build and run that. Please note the build tool is uv and see existing dependencies
          in /Users/hayde/IdeaProjects/drools/cdc_agents/pyproject.toml.
          
          If necessary, you can check with the filesystem in /Users/hayde/IdeaProjects/drools/cdc_agents/docker/build.sh to see the full build process and optional run commands.
      agent_card:
        name: CodeRunnerAgent
        path: /code-runner
        description:
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.code_runner_agent.CodeRunnerAgent
      mcp_tools:
        #        rip-grep:
        #          stop_tool: docker stop $(docker ps | grep mcp/code-runner-grep | cut -d' ' -f1)
        #          name: git
        #          tool_prompt: >
        #            Use grep
        #          tool_options:
        #            command: docker
        #            args:
        #              - run
        #              - -i
        #              - --rm
        #              - --mount type=bind,src=/Users/
        #              - mcp/code-runner-grep
        #            env:
        git:
          stop_tool: container_id=$(docker ps | grep mcp/git-code-runner | awk '{print $1}') [ -n "$container_id" ] && docker stop "$container_id" >/dev/null 2>&1
          name: git
          tool_prompt: "Use git tool"
          tool_options:
            command: docker
            args:
              - run
              - -i
              - --rm
              - -v
              - /Users/hayde/IdeaProjects:/Users/hayde/IdeaProjects
              - mcp/git-code-runner
            env:
        filesystem:
          name: filesystem
          tool_prompt: >
            Use file system tool to search the file system for repositories, paths, or other data.
          tool_options:
            command: docker
            args:
              - run
              - -i
              - --rm
              - -v
              - /Users/hayde/IdeaProjects:/Users/hayde/IdeaProjects
              - mcp/filesystem-code-runner
              - /Users/hayde/IdeaProjects
            env:
        docker:
          tool_prompt: >
            Use docker to build the container. Please note the directory provided by the user.
          name: docker
          tool_options:
            command: docker
            args:
              - run
              - -i
              - --rm
              - -v
              - /var/run/docker.sock:/var/run/docker.sock
              - mcp/docker-code-runner
            env:
    CdcCodegenAgent:
      agent_card:
        name: CdcCodegenAgent
        path: /codegen
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.cdc_server_agent.CdcCodegenAgent
      mcp_tools:
        postgres:
          name: postgres
          tool_prompt: >
            Postgres can be used ...
          tool_options:
            command: docker
            args:
              - run
              - -i
              - --rm
              - mcp/postgres-codegen
              - postgresql://postgres:postgres@host.docker.internal:5450/postgres
            env:
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: CdcCodegenAgent
        system_instruction: >
          You are a specialized assistant for generating commits for implementation of software projects.
          You request the generation of a full git commit, with respect to a commit message and other contextual information
          provided to you. Then, after applying the commit, you ask for the code to be tested. Sometimes, you will ask
          it to be tested and then you will be asked again later to generate another commit from the feedback on why it failed.
          In this case, you either need to generate the whole commit again, taking into account the error, or request
          for more information about the repository, file system, or dependency, so that next time you have the information you need
          to provide the finished code generation. By the time you are asked to fix the commit, it will have been reverted,
          but you will still be able to look at what changes you made.
        orchestrator_instruction: >
          An agent that generates code modifications using the history of diffs added with the CdcCodeSearchAgent.
    CdcCodeSearchAgent:
      agent_card:
        name: CdcCodeSearchAgent
        path: /code_search
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.cdc_server_agent.CdcCodeSearchAgent
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:8b
        agent_name: CdcCodeSearchAgent
        system_instruction: >
          You are a specialized assistant for searching for code context information.
          Your overall goal is to provide context for code generation across multiple repositories, within the context of
          the history of the development of that software. In order to achieve your purpose, you have access to some tools.
          The tools you have facilitate performing operations on git repositories, including adding git diffs for repositories
          and branches to the vector database, removing git diffs for repositories and branches from the vector database,
          and retrieving files from the vector database with their history by a code snippet or commit message. You can
          also parse the repository history with respect to an input, such as a code snippet or a message, and add diffs
          from the blame tree with respect to this code snippet or message.
          
          If you do not have enough
          information to perform your request, you can return a request for that information. Examples of this would be,
          for instance, if you need to include the code from one of the libraries. Then you could request for the URL
          for the git repository for that library. At that point, another agent will retrieve that information for you and
          you can then perform your function to better inform your operations.
        orchestrator_instruction: >
          An agent that can add git repositories to an embedding database with history. This agent has a mechanism to
          provide contextual information from the git repositories. This agent has access to an embedding database, so
          he embeds the commit history as git commit diffs, and then interfaces with these repositories, returning
          relevant files to the queries in the context with their history in an XML format that can be parsed by downstream
          codegen processes. It can also parse repositories with respect to particular queries, adding commit diffs to the
          repository with respect to particular code, so it can be used to produce more relevant contextual information,
          using the git blame tree mechanism.
    DeepCodeAgent:
      agent_card:
        name: DeepCodeAgent
        path: /deep_code
        version: 0.0.1
      agent_clazz: cdc_agents.agent.agent.deep_code_research_agent.DeepCodeAgent
      agent_descriptor:
        model: ollama_chat://ollama_chat/hermes3:70b
        agent_name: DeepCodeAgent
        orchestration_instruction: >
          You are the orchestrator agent for code generation. Your job is to orchestrate a group of agents to implement tickets for software projects.
          After every agent returns, you will then evaluate it's response and delegate to another agent or produce a final answer.
          
          Here are a list of the agents that you are in charge of orchestrating:
        orchestration_message: >
          Your primary goal is to interpret the responses from the agents into requests for other agents, including adding any additional
          context to them to help them along with the overall goal of implementing software using contextual information. Make sure that
          when you interpret the previous agent's response, if you decide to delegate to another agent and add context make sure that
          the context you add relates to their domain. In order to delegate to the agent, please follow the format
          
          NEXT AGENT: [name of the agent, as per the agents provided previously with agent_name]
          ADDITIONAL CONTEXT: [additional relevant contextual information, for example summarizing previous information and what you'd like that agent to do]
          
          If the agent provides a message with
          
          FINAL ANSWER:
          [final answer provided]
          
          Please evaluate the answer, and determine whether or not it meets the requirements or additional action is needed. For example,
          if the CdcCodeSearchAgent provides context, and then you call the CdcCodegenAgent, which provides a final answer,
          then, in order to validate the answer, you may apply the code changes and validate them using the CodeRunnerAgent,
          or generate some tests after applying the changes and run those with the CodeRunnerAgent. After the CodeRunnerAgent
          provides feedback from running the code, you may need to revert the changes using git and delegate to the
          CdcCodegenAgent to provide the changes with updates to fix the errors provided.
          
          In some cases, you may
          need to validate business requirements, or demonstrate the code changes, in which case you may then call the
          HumanDelegateAgent to validate the changes, or business requirements.
          
          In any case, please ensure that the software implementation is thorough and complete, and validated, and if you
          have any questions, please reach out using the HumanDelegateAgent.
profiles:
  active_profiles:
    main_profile:
      profile_name: main_profile
env_factories:
  factories:
    - factory: python_di.inject.context_builder.factory_ctx.FactoryCtx
      lazy: "False"
    - factory: python_di.inject.reflectable_ctx.ReflectableCtx
      lazy: "False"
    - factory: drools_py.inject.serialization_ctx.SerializationCtx
      lazy: "False"
